version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0.0

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: cicltechnikum/conint-sem-backend
      TAG: latest
    docker:
      - image: cimg/base:2023.05

# Define the jobs we want to run for this project
jobs:
  lint-test:
    environment:
      NODE_ENV: circleci
    # Primary container image where all commands run
    docker:
      - image: cimg/node:20.0.0
    # service container image
      - image: cimg/mariadb:10.10.3
        name: db
        environment:
          MARIADB_ROOT_PASSWORD: root
          MARIADB_DATABASE: tododot
          MARIADB_USER: todo-admin
          MARIADB_PASSWORD: admin-pw
    steps:
      - checkout
      - run: 
          name: "Install dependencies"
          command: npm install
      - run:
          name: "Linting Stage"
          command: npm run lint
      - run:
          name: "install dockerize"
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: "Wait for db"
          command: dockerize -wait tcp://db:3306 -timeout 1m
      - run: 
          name: "connect to db test"
          command: |
            sudo apt-get update && sudo apt-get install -y mysql-client
            mysql -h db -u todo-admin -padmin-pw -D tododot -e "select 1;" -v
      - run: 
          name: "Testing"
          command: npm run test

  build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run: 
          name: "Building"
          command: docker build -t $IMAGE_NAME:$TAG .
      - run:
          name: "Archive Docker image"
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  deliver:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: "Load archived Docker image"
          command: docker load -i /tmp/workspace/image.tar
      - run: 
          name: "Deliver - Publish to docker hub"
          command: | 
            echo "$DOCKER_HUB_PW" | docker login -u cicltechnikum --password-stdin
            docker push $IMAGE_NAME:$TAG

  deploy:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws_access_key_id: ASIAS3VO4TWGIVNRINV7
          aws_secret_access_key: wn1CLJ9p35umyGHO4ekY5wCYAFMSindwsBehwh1z
          region: us-east-1
      - run: 
          name: "Deploy to EC2 instance"
          command: |
            sudo apt-get update && sudo apt-get install -y openssh-client
            echo "-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEApPP9HU5/9dYJ3/Qry+AeXQqF5T8RwicZm5exQLMxwlJ5WB+L
OZT0UTEbSFaUAbAeXV0xzHE73cvVPOGuU07y0s2+y5srUSr6efiZ9FADAhNQs12s
+JTSJt0tdjFnfuUJfJkQlFW0NnQI3zyJ75PHNeoLWz9Ujh2715XV2gcAGh+ii0oe
CDhAGUWf9+EjJrHZHcZc20J2fxb0Lr3khURIekRiO9W0mD+99fgu3e/po/MdeMaz
U0UZ1FujKw7mCqeeTFwsffvRqDVS2QIDBxGj1h9XLstnkgkTf2kLlRBRAJOj6iEr
joLYOVdOlk1rYxVMJQn4MTEcYX9B3xy6eY7TEwIDAQABAoIBABzWLpyt+X6/oVBO
fk2Q6532VfwCr5cSgM6LkUgvS3aeNmpqcUtqt99tx0g5Iny9DkHiJe+IqB+ZH7kZ
9wDHX3nsz/sGMGdrLQifpkJorm3xdH021iNK2QZESktMTbyIS8VFePmFlhCi7l4g
VjjUy9GoDb4w7xY9KnaA0jbgXGs0bk42rz26IPKi/PEaP5Di9l4x8coQ/ji1PoUA
sCCoHKEM9r8JulV+b5+zBZ32h4A+xoATkI/tx3EiR6vs9s4+GDBwTAqJ9OOC9znW
E/r8zbjvbZMl8sLtq533Rfk1bIwOSKtKeNC3erqD1Cr9FUl4hNrjoyM11ec6f0pg
MGsPulkCgYEA5Svdme/sIZMKXJl+jM/H8cl5vynHiBnix7EOehMsotk8dP2PPv45
p5nYw093yjaWI3qDbiBXeAHO5uD1xzCMKgJm9PFbdk++LNNxpMPReNAutrPduSLs
DT+JtfkcEoZHeGVLHVJk4veFlA0fWQa3ZZqRw9ZfEcI1+lOpL2ugXMUCgYEAuEOJ
zKNWoN1U22Aw1WovY5r9czdfcPAnQO46uveeBRpkgRLqnZIkLsHGgS+uUeiE+o4d
XCK4jkueNpNrFfoEbgr6/lQ08AmGneGxwT87xc8PBrcijOAfLfxqw9LM/Yi8XhJL
puM/JuJZ+Dud6/XxvwyXqjPf7+tQuxznHPU3HfcCgYEAqk8vIHdsxIbB7I8lvP+t
V8Ki963U2xBhuIWcfJxDT8Kha1AEZIwJzMRIkt076MsoSLWDdxQR7N1rJamI/b7W
a2Hdoaq8jfA1JJr+mbPsuBv+m0iQPkX1puLRNKsscZfZBWBBskjJMONCIgSeh0q2
gIueSCvH+yqZcq85zEPvqQECgYEAm7H1rcQWXramDPeqS6n9gNxlbAVNz9AcWvDx
DypLi2RRp/6j36CskhWJ9X6kfPFL66pJhKCR8SpT9Sl7QoaPV6xPiLb+RBTIen9K
A0+64dmjiLkVqJN3xROT4wMr0s7G23X6FnnN0r1P6D/3oHmgWx34yQgsID1labVy
UzWf7OECgYA4YYkSWBLHmyF8RSqHcCEANTCNDpAtxBRb/x0FIokuHZHw6nsTERC1
fB5X8S7vHsb6CZPRdAbtwwVh4GSz5yFZ/0Ut65w6BM44coxEOWkGXQjGiJF4X2Uj
SloYyJNLr1sMr8XHgS1qxD1eb2zNdeZr5gMt+vLPsNKRHXEfJfrr6g==
-----END RSA PRIVATE KEY-----" > deploy_key.pem
            sudo chmod 400 deploy_key.pem
            sudo ssh -o StrictHostKeyChecking=no -i deploy_key.pem ubuntu@54.145.42.248 "sudo docker compose up --pull --force-recreate"


# Orchestrate our job run sequence
workflows:
  lint-test-build-deliver-deploy:
    jobs:
      - lint-test
      - build:
          requires:
            - lint-test
      - deliver:
          requires:
            - build
          filters:
            branches:
              only: production
      - deploy:
          requires:
            - deliver
          filters:
            branches:
              only: production
